
[34m2023-11-06 09:38:50.264[39m | [1m      INFO      [22m | Running validator for subnet: 18 on network: wss://entrypoint-finney.opentensor.ai:443
[34m2023-11-06 09:39:13.220[39m | [1m      INFO      [22m | retrived new questions: ['What is the most important quality you look for in a partner?', 'How do you define love?', 'What is your idea of a perfect date?', 'What is the best relationship advice you have ever received?', 'What is the most romantic gesture you have ever made or received?', 'What is the key to a successful long-term relationship?', 'What is your favorite love song and why?', 'What is the most memorable love story you have heard?', 'What is the biggest challenge in maintaining a healthy relationship?', 'What is your favorite way to show someone you care about them?']
[34m2023-11-06 09:39:13.220[39m | [1m      INFO      [22m | Sent query to miner: 'What is the most important quality you look for in a partner?' using gpt-3.5-turbo
Traceback (most recent call last):
  File "/root/subnets/exploitproof-net/bittensor-subnet-template/neurons/validator.py", line 237, in <module>
    main(get_config())
  File "/root/subnets/exploitproof-net/bittensor-subnet-template/neurons/validator.py", line 234, in main
    run_validator_loop(wallet, subtensor, dendrite, metagraph, config, scores)
  File "/root/subnets/exploitproof-net/bittensor-subnet-template/neurons/validator.py", line 201, in run_validator_loop
    for chunk in dendrite.query(metagraph.axons, template.protocol.Openai(openai_input=query, openai_engine=engine), deserialize=True):
AttributeError: module 'template.protocol' has no attribute 'Openai'
[31m╭─────────────────────────────── [39m[1mTraceback (most recent call last)[31m[22m ────────────────────────────────╮
[31m│[39m /root/subnets/exploitproof-net/bittensor-subnet-template/neurons/[1mvalidator.py[22m:[94m237[39m in [92m<module>[39m    [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   234 │   run_validator_loop(wallet, subtensor, dendrite, metagraph, config, scores)             [31m│
[31m│[39m   235                                                                                            [31m│
[31m│[39m   236 [94mif[39m [91m__name__[39m == [33m"__main__"[39m:                                                                 [31m│
[31m│[39m [31m❱ [39m237 │   main(get_config())                                                                     [31m│
[31m│[39m   238                                                                                            [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /root/subnets/exploitproof-net/bittensor-subnet-template/neurons/[1mvalidator.py[22m:[94m234[39m in [92mmain[39m        [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   231 │   my_subnet_uid = metagraph.hotkeys.index(wallet.hotkey.ss58_address)                    [31m│
[31m│[39m   232 │   scores = torch.ones_like(metagraph.S, dtype=torch.float32)                             [31m│
[31m│[39m   233 │                                                                                          [31m│
[31m│[39m [31m❱ [39m234 │   run_validator_loop(wallet, subtensor, dendrite, metagraph, config, scores)             [31m│
[31m│[39m   235                                                                                            [31m│
[31m│[39m   236 [94mif[39m [91m__name__[39m == [33m"__main__"[39m:                                                                 [31m│
[31m│[39m   237 │   main(get_config())                                                                     [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /root/subnets/exploitproof-net/bittensor-subnet-template/neurons/[1mvalidator.py[22m:[94m201[39m in             [31m│
[31m│[39m [92mrun_validator_loop[39m                                                                               [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   198 │   │   │   all_chunks = []                                                                [31m│
[31m│[39m   199 │   │   │                                                                                  [31m│
[31m│[39m   200 │   │   │   # Query the dendrite and process the chunks as they arrive                     [31m│
[31m│[39m [31m❱ [39m201 │   │   │   [94mfor[39m chunk [95min[39m dendrite.query(metagraph.axons, template.protocol.Openai(openai   [31m│
[31m│[39m   202 │   │   │   │   bt.logging.info([33mf"Received chunk: {[39mchunk[33m}"[39m)                                [31m│
[31m│[39m   203 │   │   │   │   all_chunks.append(chunk)                                                   [31m│
[31m│[39m   204                                                                                            [31m│
[31m╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
[1mAttributeError: [22mmodule [32m'template.protocol'[39m has no attribute [32m'Openai'