import openai
import time
import os
import ast 

openai.api_key = os.environ.get('OPENAI_API_KEY')
if not openai.api_key:
    raise ValueError("Please set the OPENAI_API_KEY environment variable.")

import re

def extract_python_list(text):
    list_pattern = re.compile(r'\[.*?\]')
    match = list_pattern.search(text)
    if match:
        list_str = match.group(0)
        try:
            # Safely evaluate the extracted string
            evaluated = ast.literal_eval(list_str)
            if isinstance(evaluated, list):
                return evaluated
        except:
            pass
    return None


def send_openai_request(prompt, max_retries=5):
    start_time = time.time()
    retry_count = 0
    themes = None

    while retry_count < max_retries and themes is None:
        try:
            # Format the messages parameter as a list of dictionaries
            messages = [{"role": "user", "content": prompt}]

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages,
                temperature=.5,
            )
            duration = round(time.time() - start_time, 4)
            print(f"OpenAI API request took {duration} seconds")
            answer = response["choices"][0]["message"]["content"].strip().replace("\n", " ")
            print(answer)
            themes = extract_python_list(answer)
            if themes:
                return themes


        except Exception as e:
            print(f"Got exception when calling openai {e}")
            return "Error calling model"

        retry_count += 1

    if themes:
        return themes
    else:
        return "Failed to get a valid list after max retries."

prompt = "Give me a python list of 100 different creative themes of which one could ask meaningful questions. Max four words each. Provide it in python list structure and don't write anything extra, just provide exclusively the complete list."
print(send_openai_request(prompt))
