import openai
import time
import os
import ast 
import traceback

openai.api_key = os.environ.get('OPENAI_API_KEY')
if not openai.api_key:
    raise ValueError("Please set the OPENAI_API_KEY environment variable.")

def send_openai_request(prompt, max_retries=5):
    try:
        # Format the messages parameter as a list of dictionaries
        # messages = [{"role": "user", "content": prompt}]

        start_time = time.time()

        # send a ChatCompletion request to count to 100
        response = openai.ChatCompletion.create(
            model='gpt-3.5-turbo',
            messages=[
                {'role': 'user', 'content': prompt}
            ],
            temperature=0,
            stream=True  # again, we set stream=True
        )

        # create variables to collect the stream of chunks
        collected_chunks = []
        collected_messages = []
        # iterate through the stream of events
        for chunk in response:
            chunk_time = time.time() - start_time  # calculate the time delay of the chunk
            collected_chunks.append(chunk)  # save the event response
            chunk_message = chunk['choices'][0]['delta']  # extract the message
            collected_messages.append(chunk_message)  # save the message
            print(f"Message received {chunk_time:.2f} seconds after request: {chunk_message}")  # print the delay and text

        # print the time delay and text received
        print(f"Full response received {chunk_time:.2f} seconds after request")
        full_reply_content = ''.join([m.get('content', '') for m in collected_messages])
        print(f"Full conversation received: {full_reply_content}")


    except Exception as e:
        print(f"Got exception when calling openai {e}")
        traceback.print_exc()  # This will print the full traceback
        return "Error calling model"

prompt = "count to 10"
print(send_openai_request(prompt))
